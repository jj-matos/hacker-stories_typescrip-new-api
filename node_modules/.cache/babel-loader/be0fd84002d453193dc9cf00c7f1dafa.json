{"ast":null,"code":"var _jsxFileName = \"/home/joao/Documents/02_MIND/05_IT/00_PROJECTS/my-hacker-news_typescript+new-api/src/App.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n//#########\n// Imports\n//#########\nimport * as React from 'react';\nimport axios from 'axios';\nimport { SearchForm, StyledButtonLarge, StyledColumn } from './SearchForm.tsx';\nimport { List } from './List.tsx';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//#######\n// Style\n//#######\nconst StyledContainer = styled.div`\n  height: 100vw;\n  padding: 20px;\n  background: #83a4d4;\n  background: linear-gradient(to left, #b6fbff, #83a4d4);\n  color:#171212;\n`;\n_c = StyledContainer;\nconst StyledHeadlinePrimary = styled.h1`\n  font-size: 48px;\n  font-weight: 300;\n  letter-spacing: 2px;\n`; //################################################################\n// Constants, Variables & Functions defined outside App component\n//################################################################\n//==========================================\n// Fetching data url with stories id's list\n//==========================================\n\n_c2 = StyledHeadlinePrimary;\nconst API_ENDPOINT = 'https://hacker-news.firebaseio.com/v0/topstories.json'; //=================================================\n// Saves searchTerm on local storage (Client Side)\n//=================================================\n\nconst useSemiPersistentState = (key, initialState) => {\n  _s();\n\n  const [value, setValue] = React.useState(localStorage.getItem(key) || initialState);\n  React.useEffect(() => {\n    localStorage.setItem(key, value);\n    console.log('Search (input) value saved on local storage:');\n    console.log(localStorage.getItem(key) || initialState);\n  }, [value, key]);\n  console.log('return from useSemiPersistentState');\n  console.log(value);\n  return [value, setValue];\n}; //===========================\n// Manages App state changes\n//===========================\n\n\n_s(useSemiPersistentState, \"16clVEaJ+Xr2ZDVF6trV8RJdLe4=\");\n\nconst storiesReducer = (state, action) => {\n  switch (action.type) {\n    case 'STORIES_FETCH_INIT':\n      return { ...state,\n        isLoading: true,\n        isError: false\n      };\n\n    case 'STORIES_FETCH_SUCCESS':\n      console.log('storiesReducer called. State update: data');\n      console.log(action.payload);\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n\n    case 'STORIES_FETCH_FAILURE':\n      return { ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    case 'REMOVE_STORY':\n      console.log(action.payload);\n      console.log(state.data);\n      return { ...state,\n        data: state.data.filter(story => action.payload.id !== story.data.id)\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nconst getLastSearches = searches => searches.slice(-5); //###############\n// App component\n//###############\n\n\nconst App = () => {\n  _s2();\n\n  console.log('App renders'); //=======\n  // Hooks\n  //=======\n\n  const [searchTerm, setSearchTerm] = useSemiPersistentState('search', 'React');\n  const [searches, setSearches] = React.useState([searchTerm]);\n  const [url, setUrl] = React.useState(`${API_ENDPOINT}`);\n  const [stories, dispatchStories] = React.useReducer(storiesReducer, {\n    data: [],\n    isLoading: false,\n    isError: false\n  }); //============================================================\n  // Fetches individual stories by id, stores them in an array,\n  // and updates data in the app state\n  //============================================================\n\n  const getAsyncStories = async fetchedIdList => {\n    console.log('Promise called:');\n    console.log(fetchedIdList.data);\n    const storiesArray = [];\n    await Promise.all(fetchedIdList.data.map(async item => {\n      const story = await axios.get(`https://hacker-news.firebaseio.com/v0/item/${item}.json`);\n      storiesArray.push(story);\n    }));\n    console.log('Dispaching:');\n    console.log(storiesArray);\n    dispatchStories({\n      type: 'STORIES_FETCH_SUCCESS',\n      payload: storiesArray\n    });\n  }; //====================================================\n  // Fetches stories id's list from API, \n  // following an url change or an event,\n  // and updates state data with individual items array\n  // referenced to the id's in the initial id's list\n  //====================================================\n\n\n  const handleFetchStories = React.useCallback(async () => {\n    dispatchStories({\n      type: 'STORIES_FETCH_INIT'\n    });\n\n    try {\n      const fetchedIdList = await axios.get(url);\n      console.log('Data fetched:');\n      console.log(fetchedIdList.data);\n      await getAsyncStories(fetchedIdList);\n      console.log('Data changed in state'); //This useEffect doesn't work here. Gives an error - Why?\n\n      /*React.useEffect(() => {\n      getAsyncStories().then(result => {\n      console.log(1);\n      dispatchStories({\n        type: 'STORIES_FETCH_SUCCESS',\n        payload: result.stories.data,\n      });\n      });\n      },[]);\n      //This one also not - Why?\n      /*React.useEffect(() => {\n      console.log(Test use.Effect);\n      },[]);*/\n    } catch (error) {\n      dispatchStories({\n        type: 'STORIES_FETCH_FAILURE'\n      });\n    }\n  }, [searches]);\n  React.useEffect(() => {\n    handleFetchStories();\n  }, [handleFetchStories]);\n  /*const handleSort = (\n    event: React.ChangeEvent<HTMLButtonElement>\n   ) => {\n    setSortOption(sortOption);\n  };*/\n  //=================================================\n  // Changes searchTerm following input field change\n  //=================================================\n\n  const handleSearchInput = event => {\n    setSearchTerm(event.target.value);\n    console.log('setSearchTerm called');\n  }; //==================================\n  // Removes story from rendered list\n  //==================================\n\n\n  const handleRemoveStory = item => {\n    dispatchStories({\n      type: 'REMOVE_STORY',\n      payload: item\n    });\n  }; //=======================================\n  // Handles submit button click triggers:\n  // - Fetches id list from url\n  // - Saves search to be rendered with \n  //   previous searches buttons\n  //=======================================\n\n\n  const handleSearchSubmit = event => {\n    handleSearch(searchTerm);\n    event.preventDefault();\n  }; //=======================\n  // Handles last searches \n  //=======================\n\n\n  const handleLastSearch = searchTerm => {\n    handleSearch(searchTerm);\n  }; //##################\n  // Handles searches\n  //##################\n\n\n  const handleSearch = searchTerm => {\n    setSearches(searches.concat(searchTerm));\n  };\n\n  const lastSearches = getLastSearches(searches); //=============\n  // Renders App\n  //=============\n\n  return /*#__PURE__*/_jsxDEV(StyledContainer, {\n    children: [console.log(stories.data), console.log(stories.isLoading), /*#__PURE__*/_jsxDEV(StyledHeadlinePrimary, {\n      children: \"My Hacker Stories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      searchTerm: searchTerm,\n      onSearchInput: handleSearchInput,\n      onSearchSubmit: handleSearchSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), lastSearches.map((searchTerm, index) => /*#__PURE__*/_jsxDEV(StyledColumn, {\n      children: /*#__PURE__*/_jsxDEV(StyledButtonLarge, {\n        type: \"button\",\n        onClick: () => handleLastSearch(searchTerm),\n        children: searchTerm\n      }, searchTerm + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), stories.isError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Something went wrong ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 27\n    }, this), console.log(stories.isLoading), stories.isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [console.log(stories.data), /*#__PURE__*/_jsxDEV(List, {\n        list: stories.data,\n        searchTerm: searchTerm,\n        onRemoveItem: handleRemoveStory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n}; //#########\n// Exports\n//#########\n\n\n_s2(App, \"uBhNAFbN6C7FrzKXuYDgTzNcaOA=\", false, function () {\n  return [useSemiPersistentState];\n});\n\n_c3 = App;\nexport default App;\nexport { storiesReducer, SearchForm, List };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledContainer\");\n$RefreshReg$(_c2, \"StyledHeadlinePrimary\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/joao/Documents/02_MIND/05_IT/00_PROJECTS/my-hacker-news_typescript+new-api/src/App.tsx"],"names":["React","axios","SearchForm","StyledButtonLarge","StyledColumn","List","styled","StyledContainer","div","StyledHeadlinePrimary","h1","API_ENDPOINT","useSemiPersistentState","key","initialState","value","setValue","useState","localStorage","getItem","useEffect","setItem","console","log","storiesReducer","state","action","type","isLoading","isError","payload","data","filter","story","id","Error","getLastSearches","searches","slice","App","searchTerm","setSearchTerm","setSearches","url","setUrl","stories","dispatchStories","useReducer","getAsyncStories","fetchedIdList","storiesArray","Promise","all","map","item","get","push","handleFetchStories","useCallback","error","handleSearchInput","event","target","handleRemoveStory","handleSearchSubmit","handleSearch","preventDefault","handleLastSearch","concat","lastSearches","index"],"mappings":"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","sourcesContent":["//#########\n// Imports\n//#########\n\nimport * as React from 'react';\nimport axios from 'axios';\n\nimport { SearchForm, StyledButtonLarge, StyledColumn } from './SearchForm.tsx';\nimport { List } from './List.tsx';\n\nimport styled from 'styled-components';\n\nimport { ReactComponent as Check } from './check.svg';\n\n//#######\n// Style\n//#######\n\nconst StyledContainer = styled.div`\n  height: 100vw;\n  padding: 20px;\n  background: #83a4d4;\n  background: linear-gradient(to left, #b6fbff, #83a4d4);\n  color:#171212;\n`;\n\nconst StyledHeadlinePrimary = styled.h1`\n  font-size: 48px;\n  font-weight: 300;\n  letter-spacing: 2px;\n`;\n\n//################################################################\n// Constants, Variables & Functions defined outside App component\n//################################################################\n\n//==========================================\n// Fetching data url with stories id's list\n//==========================================\n\nconst API_ENDPOINT = 'https://hacker-news.firebaseio.com/v0/topstories.json';\n\n//=================================================\n// Saves searchTerm on local storage (Client Side)\n//=================================================\n\ninterface StoriesFetchInitAction {\n  type: 'STORIES_FETCH_INIT';\n}\n\ninterface StoriesFetchSuccessAction {\n  type: 'STORIES_FETCH_SUCCESS';\n  payload: Stories;\n}\n\ninterface StoriesFetchFailureAction {\n  type: 'STORIES_FETCH_FAILURE';\n}\n\ninterface StoriesRemoveAction {\n  type: 'REMOVE_STORY';\n  payload: Story;\n}\n\ntype StoriesAction = \n  | StoriesFetchInitAction\n  | StoriesFetchSuccessAction\n  | StoriesFetchFailureAction\n  | StoriesRemoveAction;\n\nconst useSemiPersistentState = (\n  key: string,\n  initialState: string\n ): [string, (newValue: string) => void] => {\n  const [value, setValue] = React.useState(\n    localStorage.getItem(key) || initialState\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(key, value);\n    console.log('Search (input) value saved on local storage:');\n    console.log(localStorage.getItem(key) || initialState);\n  }, [value, key]);\n  \n  console.log('return from useSemiPersistentState');\n  console.log(value);\n  return [value, setValue];\n};\n\n//===========================\n// Manages App state changes\n//===========================\n\ntype StoriesState = {\n  data: Stories;\n  isLoading: boolean;\n  isError: boolean;\n};\n\nconst storiesReducer = (\n  state: StoriesState,\n  action: StoriesAction\n) => {\n  switch (action.type) {\n    case 'STORIES_FETCH_INIT':\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case 'STORIES_FETCH_SUCCESS':\n      console.log('storiesReducer called. State update: data');\n      console.log(action.payload);\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case 'STORIES_FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    case 'REMOVE_STORY':\n      console.log(action.payload);\n      console.log(state.data);\n      return {\n        ...state,\n        data: state.data.filter(\n          (story) => action.payload.id !== story.data.id\n        ),\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst getLastSearches = (searches) => searches.slice(-5);\n\n//###############\n// App component\n//###############\n\nconst App = () => {\n  console.log('App renders');\n\n//=======\n// Hooks\n//=======\n\n  const [searchTerm, setSearchTerm] = useSemiPersistentState(\n    'search',\n    'React'\n  );\n\n  const [searches, setSearches] = React.useState ([searchTerm]);\n\n  const [url, setUrl] = React.useState(\n    `${API_ENDPOINT}`\n  );\n\n  const [stories, dispatchStories] = React.useReducer(\n    storiesReducer,\n    { data: [], isLoading: false, isError: false }\n  );\n\n//============================================================\n// Fetches individual stories by id, stores them in an array,\n// and updates data in the app state\n//============================================================\n\n  const getAsyncStories = async (fetchedIdList) => {\n    console.log('Promise called:');\n    console.log(fetchedIdList.data);\n    \n    const storiesArray = [];\n\n    await Promise.all (\n      fetchedIdList.data.map(\n        async (item) => {\n          const story = await axios.get(`https://hacker-news.firebaseio.com/v0/item/${item}.json`);\n          storiesArray.push(story);\n        }\n      )\n    )\n    console.log('Dispaching:');\n    console.log(storiesArray);\n\n    dispatchStories({\n      type: 'STORIES_FETCH_SUCCESS',\n      payload: storiesArray,\n    });\n\n  };\n\n//====================================================\n// Fetches stories id's list from API, \n// following an url change or an event,\n// and updates state data with individual items array\n// referenced to the id's in the initial id's list\n//====================================================\n\n  const handleFetchStories = React.useCallback(async () => {\n    dispatchStories({ type: 'STORIES_FETCH_INIT' });\n\n    try {\n      const fetchedIdList = await axios.get(url);\n      console.log('Data fetched:');\n      console.log(fetchedIdList.data);\n\n      await getAsyncStories(fetchedIdList);\n      console.log('Data changed in state');\n\n      //This useEffect doesn't work here. Gives an error - Why?\n            /*React.useEffect(() => {\n          getAsyncStories().then(result => {\n            console.log(1);\n            dispatchStories({\n              type: 'STORIES_FETCH_SUCCESS',\n              payload: result.stories.data,\n            });\n          });\n      },[]);\n\n      //This one also not - Why?\n            /*React.useEffect(() => {\n        console.log(Test use.Effect);\n      },[]);*/\n\n\n    } catch (error) {\n      dispatchStories({ type: 'STORIES_FETCH_FAILURE' });\n    }\n  }, [searches]);\n\n  React.useEffect(() => {\n    handleFetchStories();\n    }, [handleFetchStories]);\n\n  /*const handleSort = (\n    event: React.ChangeEvent<HTMLButtonElement>\n   ) => {\n    setSortOption(sortOption);\n  };*/\n\n//=================================================\n// Changes searchTerm following input field change\n//=================================================\n\n  const handleSearchInput = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setSearchTerm(event.target.value);\n    console.log('setSearchTerm called');\n  };\n\n//==================================\n// Removes story from rendered list\n//==================================\n\n  const handleRemoveStory = (item: Story) => {\n    \n    dispatchStories({\n      type: 'REMOVE_STORY',\n      payload: item,\n    });\n  };\n\n//=======================================\n// Handles submit button click triggers:\n// - Fetches id list from url\n// - Saves search to be rendered with \n//   previous searches buttons\n//=======================================\n\n  const handleSearchSubmit = (\n   event: React.FormEvent<HTMLFormElement>\n  ) => {\n    \n    handleSearch(searchTerm);\n\n    event.preventDefault();\n  };\n\n//=======================\n// Handles last searches \n//=======================\n\n  const handleLastSearch = (searchTerm) => {\n    handleSearch(searchTerm);\n  };\n\n//##################\n// Handles searches\n//##################\n\n  const handleSearch = (searchTerm) => {\n    setSearches(searches.concat(searchTerm));\n  };\n\n\n  const lastSearches = getLastSearches(searches);\n\n//=============\n// Renders App\n//=============\n\n  return (\n    <StyledContainer>\n      {console.log(stories.data)}\n      {console.log(stories.isLoading)}\n      <StyledHeadlinePrimary>My Hacker Stories</StyledHeadlinePrimary>\n\n      <SearchForm\n        searchTerm={searchTerm}\n        onSearchInput={handleSearchInput}\n        onSearchSubmit={handleSearchSubmit}\n      />\n\n      {lastSearches.map((searchTerm, index) => (\n        <StyledColumn>\n          <StyledButtonLarge\n            key={searchTerm+index}\n            type=\"button\"\n            onClick={() => handleLastSearch(searchTerm)}\n          >\n            {searchTerm}\n          </StyledButtonLarge>\n        </StyledColumn>\n      ))}\n\n      <hr />\n      {stories.isError && <p>Something went wrong ...</p>}\n      {console.log(stories.isLoading)}\n      {stories.isLoading ? (\n        <p>Loading ...</p>\n      ) : (\n        <>\n        {console.log(stories.data)}\n        <List\n          list={stories.data}\n          searchTerm={searchTerm}\n          onRemoveItem={handleRemoveStory}\n        />\n        </>\n      )}\n    </StyledContainer>\n  );\n};\n\n//#########\n// Exports\n//#########\n\nexport default App;\n\nexport { storiesReducer, SearchForm, List};\n\n"]},"metadata":{},"sourceType":"module"}